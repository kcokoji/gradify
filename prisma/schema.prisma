generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?  @unique
  emailVerified  Boolean?
  image          String?
  hashedPassword String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Define relations here if needed
  accounts     Account[]
  resultFolder ResultFolder[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ResultFolder {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  user      User       @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String
  semesters Semester[]
  createdAt String

  // Define any other properties or relations specific to UserFolder
}

model Semester {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  folderId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  folder ResultFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  subjects Subjects[]

  // Define any other properties specific to Result
}

model Subjects {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  grade      String
  unit       String
  code       String
  semesterId String   @db.ObjectId
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
}
